/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { BERT_STAKING_SC_PROGRAM_ADDRESS } from '../programs';

/** PositionLocked: The staking position is still locked */
export const BERT_STAKING_SC_ERROR__POSITION_LOCKED = 0x1770; // 6000
/** PositionAlreadyClaimed: The staking position has already been claimed */
export const BERT_STAKING_SC_ERROR__POSITION_ALREADY_CLAIMED = 0x1771; // 6001
/** MaxCapReached: Maximum staking capacity reached */
export const BERT_STAKING_SC_ERROR__MAX_CAP_REACHED = 0x1772; // 6002
/** NftLimitReached: NFT limit per user reached */
export const BERT_STAKING_SC_ERROR__NFT_LIMIT_REACHED = 0x1773; // 6003
/** InvalidAmount: Invalid staking amount */
export const BERT_STAKING_SC_ERROR__INVALID_AMOUNT = 0x1774; // 6004
/** ArithmeticOverflow: Arithmetic overflow */
export const BERT_STAKING_SC_ERROR__ARITHMETIC_OVERFLOW = 0x1775; // 6005

export type BertStakingScError =
  | typeof BERT_STAKING_SC_ERROR__ARITHMETIC_OVERFLOW
  | typeof BERT_STAKING_SC_ERROR__INVALID_AMOUNT
  | typeof BERT_STAKING_SC_ERROR__MAX_CAP_REACHED
  | typeof BERT_STAKING_SC_ERROR__NFT_LIMIT_REACHED
  | typeof BERT_STAKING_SC_ERROR__POSITION_ALREADY_CLAIMED
  | typeof BERT_STAKING_SC_ERROR__POSITION_LOCKED;

let bertStakingScErrorMessages: Record<BertStakingScError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  bertStakingScErrorMessages = {
    [BERT_STAKING_SC_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [BERT_STAKING_SC_ERROR__INVALID_AMOUNT]: `Invalid staking amount`,
    [BERT_STAKING_SC_ERROR__MAX_CAP_REACHED]: `Maximum staking capacity reached`,
    [BERT_STAKING_SC_ERROR__NFT_LIMIT_REACHED]: `NFT limit per user reached`,
    [BERT_STAKING_SC_ERROR__POSITION_ALREADY_CLAIMED]: `The staking position has already been claimed`,
    [BERT_STAKING_SC_ERROR__POSITION_LOCKED]: `The staking position is still locked`,
  };
}

export function getBertStakingScErrorMessage(code: BertStakingScError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (bertStakingScErrorMessages as Record<BertStakingScError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isBertStakingScError<
  TProgramErrorCode extends BertStakingScError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BERT_STAKING_SC_PROGRAM_ADDRESS,
    code
  );
}
