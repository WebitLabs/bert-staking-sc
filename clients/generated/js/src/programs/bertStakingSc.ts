/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedClaimPositionInstruction,
  type ParsedInitializeInstruction,
  type ParsedStakeNftInstruction,
  type ParsedStakeTokenInstruction,
} from '../instructions';

export const BERT_STAKING_SC_PROGRAM_ADDRESS =
  'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2' as Address<'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2'>;

export enum BertStakingScAccount {
  Config,
  Position,
}

export function identifyBertStakingScAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BertStakingScAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return BertStakingScAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
      ),
      0
    )
  ) {
    return BertStakingScAccount.Position;
  }
  throw new Error(
    'The provided account could not be identified as a bertStakingSc account.'
  );
}

export enum BertStakingScInstruction {
  ClaimPosition,
  Initialize,
  StakeNft,
  StakeToken,
}

export function identifyBertStakingScInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BertStakingScInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 90, 89, 44, 203, 246, 210, 46])
      ),
      0
    )
  ) {
    return BertStakingScInstruction.ClaimPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return BertStakingScInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 27, 66, 46, 69, 65, 151, 219])
      ),
      0
    )
  ) {
    return BertStakingScInstruction.StakeNft;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 127, 193, 101, 37, 96, 87, 211])
      ),
      0
    )
  ) {
    return BertStakingScInstruction.StakeToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a bertStakingSc instruction.'
  );
}

export type ParsedBertStakingScInstruction<
  TProgram extends string = 'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2',
> =
  | ({
      instructionType: BertStakingScInstruction.ClaimPosition;
    } & ParsedClaimPositionInstruction<TProgram>)
  | ({
      instructionType: BertStakingScInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: BertStakingScInstruction.StakeNft;
    } & ParsedStakeNftInstruction<TProgram>)
  | ({
      instructionType: BertStakingScInstruction.StakeToken;
    } & ParsedStakeTokenInstruction<TProgram>);
