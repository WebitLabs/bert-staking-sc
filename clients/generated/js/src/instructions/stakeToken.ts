/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { BERT_STAKING_SC_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STAKE_TOKEN_DISCRIMINATOR = new Uint8Array([
  191, 127, 193, 101, 37, 96, 87, 211,
]);

export function getStakeTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STAKE_TOKEN_DISCRIMINATOR);
}

export type StakeTokenInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountProgramTokenAccount extends string
        ? WritableAccount<TAccountProgramTokenAccount>
        : TAccountProgramTokenAccount,
      TAccountProgramAuthority extends string
        ? ReadonlyAccount<TAccountProgramAuthority>
        : TAccountProgramAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type StakeTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type StakeTokenInstructionDataArgs = { amount: number | bigint };

export function getStakeTokenInstructionDataEncoder(): Encoder<StakeTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_TOKEN_DISCRIMINATOR })
  );
}

export function getStakeTokenInstructionDataDecoder(): Decoder<StakeTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getStakeTokenInstructionDataCodec(): Codec<
  StakeTokenInstructionDataArgs,
  StakeTokenInstructionData
> {
  return combineCodec(
    getStakeTokenInstructionDataEncoder(),
    getStakeTokenInstructionDataDecoder()
  );
}

export type StakeTokenAsyncInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountProgramTokenAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config?: Address<TAccountConfig>;
  position?: Address<TAccountPosition>;
  tokenMint: Address<TAccountTokenMint>;
  tokenAccount?: Address<TAccountTokenAccount>;
  programTokenAccount?: Address<TAccountProgramTokenAccount>;
  programAuthority?: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeTokenInstructionDataArgs['amount'];
};

export async function getStakeTokenInstructionAsync<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountTokenMint extends string,
  TAccountTokenAccount extends string,
  TAccountProgramTokenAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: StakeTokenAsyncInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StakeTokenInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    programTokenAccount: {
      value: input.programTokenAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.position.value) {
    accounts.position.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenAccount.value) {
    accounts.tokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.programAuthority.value) {
    accounts.programAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.programTokenAccount.value) {
    accounts.programTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.programAuthority.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.programTokenAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeTokenInstructionDataEncoder().encode(
      args as StakeTokenInstructionDataArgs
    ),
  } as StakeTokenInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type StakeTokenInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountProgramTokenAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config: Address<TAccountConfig>;
  position: Address<TAccountPosition>;
  tokenMint: Address<TAccountTokenMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  programTokenAccount: Address<TAccountProgramTokenAccount>;
  programAuthority: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  amount: StakeTokenInstructionDataArgs['amount'];
};

export function getStakeTokenInstruction<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountTokenMint extends string,
  TAccountTokenAccount extends string,
  TAccountProgramTokenAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: StakeTokenInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): StakeTokenInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountConfig,
  TAccountPosition,
  TAccountTokenMint,
  TAccountTokenAccount,
  TAccountProgramTokenAccount,
  TAccountProgramAuthority,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    programTokenAccount: {
      value: input.programTokenAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.programTokenAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeTokenInstructionDataEncoder().encode(
      args as StakeTokenInstructionDataArgs
    ),
  } as StakeTokenInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedStakeTokenInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    config: TAccountMetas[1];
    position: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenAccount: TAccountMetas[4];
    programTokenAccount: TAccountMetas[5];
    programAuthority: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: StakeTokenInstructionData;
};

export function parseStakeTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedStakeTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      config: getNextAccount(),
      position: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenAccount: getNextAccount(),
      programTokenAccount: getNextAccount(),
      programAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getStakeTokenInstructionDataDecoder().decode(instruction.data),
  };
}
