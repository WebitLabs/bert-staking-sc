/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { BERT_STAKING_SC_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STAKE_NFT_DISCRIMINATOR = new Uint8Array([
  38, 27, 66, 46, 69, 65, 151, 219,
]);

export function getStakeNftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STAKE_NFT_DISCRIMINATOR);
}

export type StakeNftInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramNftAccount extends string | IAccountMeta<string> = string,
  TAccountProgramAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftTokenAccount extends string
        ? WritableAccount<TAccountNftTokenAccount>
        : TAccountNftTokenAccount,
      TAccountProgramNftAccount extends string
        ? WritableAccount<TAccountProgramNftAccount>
        : TAccountProgramNftAccount,
      TAccountProgramAuthority extends string
        ? ReadonlyAccount<TAccountProgramAuthority>
        : TAccountProgramAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type StakeNftInstructionData = { discriminator: ReadonlyUint8Array };

export type StakeNftInstructionDataArgs = {};

export function getStakeNftInstructionDataEncoder(): Encoder<StakeNftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: STAKE_NFT_DISCRIMINATOR })
  );
}

export function getStakeNftInstructionDataDecoder(): Decoder<StakeNftInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getStakeNftInstructionDataCodec(): Codec<
  StakeNftInstructionDataArgs,
  StakeNftInstructionData
> {
  return combineCodec(
    getStakeNftInstructionDataEncoder(),
    getStakeNftInstructionDataDecoder()
  );
}

export type StakeNftAsyncInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountNftMint extends string = string,
  TAccountNftTokenAccount extends string = string,
  TAccountProgramNftAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config?: Address<TAccountConfig>;
  position?: Address<TAccountPosition>;
  nftMint: Address<TAccountNftMint>;
  nftTokenAccount?: Address<TAccountNftTokenAccount>;
  programNftAccount?: Address<TAccountProgramNftAccount>;
  programAuthority?: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export async function getStakeNftInstructionAsync<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountNftMint extends string,
  TAccountNftTokenAccount extends string,
  TAccountProgramNftAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: StakeNftAsyncInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountNftMint,
    TAccountNftTokenAccount,
    TAccountProgramNftAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StakeNftInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountNftMint,
    TAccountNftTokenAccount,
    TAccountProgramNftAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftTokenAccount: { value: input.nftTokenAccount ?? null, isWritable: true },
    programNftAccount: {
      value: input.programNftAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.position.value) {
    accounts.position.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getAddressEncoder().encode(expectAddress(accounts.nftMint.value)),
      ],
    });
  }
  if (!accounts.nftTokenAccount.value) {
    accounts.nftTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.nftMint.value)),
      ],
    });
  }
  if (!accounts.programAuthority.value) {
    accounts.programAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.programNftAccount.value) {
    accounts.programNftAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.programAuthority.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.nftMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.nftTokenAccount),
      getAccountMeta(accounts.programNftAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeNftInstructionDataEncoder().encode({}),
  } as StakeNftInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountNftMint,
    TAccountNftTokenAccount,
    TAccountProgramNftAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type StakeNftInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountNftMint extends string = string,
  TAccountNftTokenAccount extends string = string,
  TAccountProgramNftAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config: Address<TAccountConfig>;
  position: Address<TAccountPosition>;
  nftMint: Address<TAccountNftMint>;
  nftTokenAccount: Address<TAccountNftTokenAccount>;
  programNftAccount: Address<TAccountProgramNftAccount>;
  programAuthority: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
};

export function getStakeNftInstruction<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountNftMint extends string,
  TAccountNftTokenAccount extends string,
  TAccountProgramNftAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: StakeNftInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountNftMint,
    TAccountNftTokenAccount,
    TAccountProgramNftAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): StakeNftInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountConfig,
  TAccountPosition,
  TAccountNftMint,
  TAccountNftTokenAccount,
  TAccountProgramNftAccount,
  TAccountProgramAuthority,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftTokenAccount: { value: input.nftTokenAccount ?? null, isWritable: true },
    programNftAccount: {
      value: input.programNftAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.nftTokenAccount),
      getAccountMeta(accounts.programNftAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getStakeNftInstructionDataEncoder().encode({}),
  } as StakeNftInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountNftMint,
    TAccountNftTokenAccount,
    TAccountProgramNftAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedStakeNftInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    config: TAccountMetas[1];
    position: TAccountMetas[2];
    nftMint: TAccountMetas[3];
    nftTokenAccount: TAccountMetas[4];
    programNftAccount: TAccountMetas[5];
    programAuthority: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: StakeNftInstructionData;
};

export function parseStakeNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedStakeNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      config: getNextAccount(),
      position: getNextAccount(),
      nftMint: getNextAccount(),
      nftTokenAccount: getNextAccount(),
      programNftAccount: getNextAccount(),
      programAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getStakeNftInstructionDataDecoder().decode(instruction.data),
  };
}
