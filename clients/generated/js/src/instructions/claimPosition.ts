/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { BERT_STAKING_SC_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_POSITION_DISCRIMINATOR = new Uint8Array([
  168, 90, 89, 44, 203, 246, 210, 46,
]);

export function getClaimPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_POSITION_DISCRIMINATOR
  );
}

export type ClaimPositionInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramTokenAccount extends string | IAccountMeta<string> = string,
  TAccountProgramAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountProgramTokenAccount extends string
        ? WritableAccount<TAccountProgramTokenAccount>
        : TAccountProgramTokenAccount,
      TAccountProgramAuthority extends string
        ? ReadonlyAccount<TAccountProgramAuthority>
        : TAccountProgramAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClaimPositionInstructionDataArgs = {};

export function getClaimPositionInstructionDataEncoder(): Encoder<ClaimPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_POSITION_DISCRIMINATOR })
  );
}

export function getClaimPositionInstructionDataDecoder(): Decoder<ClaimPositionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimPositionInstructionDataCodec(): Codec<
  ClaimPositionInstructionDataArgs,
  ClaimPositionInstructionData
> {
  return combineCodec(
    getClaimPositionInstructionDataEncoder(),
    getClaimPositionInstructionDataDecoder()
  );
}

export type ClaimPositionAsyncInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountProgramTokenAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config?: Address<TAccountConfig>;
  position: Address<TAccountPosition>;
  tokenMint: Address<TAccountTokenMint>;
  tokenAccount?: Address<TAccountTokenAccount>;
  programTokenAccount?: Address<TAccountProgramTokenAccount>;
  programAuthority?: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getClaimPositionInstructionAsync<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountTokenMint extends string,
  TAccountTokenAccount extends string,
  TAccountProgramTokenAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: ClaimPositionAsyncInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimPositionInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    programTokenAccount: {
      value: input.programTokenAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.tokenAccount.value) {
    accounts.tokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.programAuthority.value) {
    accounts.programAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.programTokenAccount.value) {
    accounts.programTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.programAuthority.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.programTokenAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimPositionInstructionDataEncoder().encode({}),
  } as ClaimPositionInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimPositionInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
  TAccountPosition extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountProgramTokenAccount extends string = string,
  TAccountProgramAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config: Address<TAccountConfig>;
  position: Address<TAccountPosition>;
  tokenMint: Address<TAccountTokenMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  programTokenAccount: Address<TAccountProgramTokenAccount>;
  programAuthority: Address<TAccountProgramAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClaimPositionInstruction<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TAccountPosition extends string,
  TAccountTokenMint extends string,
  TAccountTokenAccount extends string,
  TAccountProgramTokenAccount extends string,
  TAccountProgramAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
>(
  input: ClaimPositionInput<
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimPositionInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountConfig,
  TAccountPosition,
  TAccountTokenMint,
  TAccountTokenAccount,
  TAccountProgramTokenAccount,
  TAccountProgramAuthority,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BERT_STAKING_SC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    programTokenAccount: {
      value: input.programTokenAccount ?? null,
      isWritable: true,
    },
    programAuthority: {
      value: input.programAuthority ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.programTokenAccount),
      getAccountMeta(accounts.programAuthority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimPositionInstructionDataEncoder().encode({}),
  } as ClaimPositionInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountConfig,
    TAccountPosition,
    TAccountTokenMint,
    TAccountTokenAccount,
    TAccountProgramTokenAccount,
    TAccountProgramAuthority,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimPositionInstruction<
  TProgram extends string = typeof BERT_STAKING_SC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    config: TAccountMetas[1];
    position: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenAccount: TAccountMetas[4];
    programTokenAccount: TAccountMetas[5];
    programAuthority: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: ClaimPositionInstructionData;
};

export function parseClaimPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      config: getNextAccount(),
      position: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenAccount: getNextAccount(),
      programTokenAccount: getNextAccount(),
      programAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimPositionInstructionDataDecoder().decode(instruction.data),
  };
}
