/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Config = Account<ConfigAccountData>;

export type ConfigAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  lockTime: bigint;
  yieldRate: bigint;
  maxCap: bigint;
  nftValueInTokens: bigint;
  nftsLimitPerUser: number;
  totalStakedAmount: bigint;
  bump: number;
};

export type ConfigAccountDataArgs = {
  authority: PublicKey;
  lockTime: number | bigint;
  yieldRate: number | bigint;
  maxCap: number | bigint;
  nftValueInTokens: number | bigint;
  nftsLimitPerUser: number;
  totalStakedAmount: number | bigint;
  bump: number;
};

export function getConfigAccountDataSerializer(): Serializer<
  ConfigAccountDataArgs,
  ConfigAccountData
> {
  return mapSerializer<ConfigAccountDataArgs, any, ConfigAccountData>(
    struct<ConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['lockTime', u64()],
        ['yieldRate', u64()],
        ['maxCap', u64()],
        ['nftValueInTokens', u64()],
        ['nftsLimitPerUser', u8()],
        ['totalStakedAmount', u64()],
        ['bump', u8()],
      ],
      { description: 'ConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130]),
    })
  ) as Serializer<ConfigAccountDataArgs, ConfigAccountData>;
}

export function deserializeConfig(rawAccount: RpcAccount): Config {
  return deserializeAccount(rawAccount, getConfigAccountDataSerializer());
}

export async function fetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Config');
  return deserializeConfig(maybeAccount);
}

export async function safeFetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeConfig(maybeAccount) : null;
}

export async function fetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Config');
    return deserializeConfig(maybeAccount);
  });
}

export async function safeFetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeConfig(maybeAccount as RpcAccount));
}

export function getConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bertStakingSc',
    'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      lockTime: number | bigint;
      yieldRate: number | bigint;
      maxCap: number | bigint;
      nftValueInTokens: number | bigint;
      nftsLimitPerUser: number;
      totalStakedAmount: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      lockTime: [40, u64()],
      yieldRate: [48, u64()],
      maxCap: [56, u64()],
      nftValueInTokens: [64, u64()],
      nftsLimitPerUser: [72, u8()],
      totalStakedAmount: [73, u64()],
      bump: [81, u8()],
    })
    .deserializeUsing<Config>((account) => deserializeConfig(account))
    .whereField(
      'discriminator',
      new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
    );
}
