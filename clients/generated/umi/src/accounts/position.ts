/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  PositionStatus,
  PositionStatusArgs,
  PositionType,
  PositionTypeArgs,
  getPositionStatusSerializer,
  getPositionTypeSerializer,
} from '../types';

export type Position = Account<PositionAccountData>;

export type PositionAccountData = {
  discriminator: Uint8Array;
  owner: PublicKey;
  depositTime: bigint;
  amount: bigint;
  positionType: PositionType;
  unlockTime: bigint;
  status: PositionStatus;
  nftMint: PublicKey;
  bump: number;
};

export type PositionAccountDataArgs = {
  owner: PublicKey;
  depositTime: number | bigint;
  amount: number | bigint;
  positionType: PositionTypeArgs;
  unlockTime: number | bigint;
  status: PositionStatusArgs;
  nftMint: PublicKey;
  bump: number;
};

export function getPositionAccountDataSerializer(): Serializer<
  PositionAccountDataArgs,
  PositionAccountData
> {
  return mapSerializer<PositionAccountDataArgs, any, PositionAccountData>(
    struct<PositionAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', publicKeySerializer()],
        ['depositTime', i64()],
        ['amount', u64()],
        ['positionType', getPositionTypeSerializer()],
        ['unlockTime', i64()],
        ['status', getPositionStatusSerializer()],
        ['nftMint', publicKeySerializer()],
        ['bump', u8()],
      ],
      { description: 'PositionAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208]),
    })
  ) as Serializer<PositionAccountDataArgs, PositionAccountData>;
}

export function deserializePosition(rawAccount: RpcAccount): Position {
  return deserializeAccount(rawAccount, getPositionAccountDataSerializer());
}

export async function fetchPosition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Position> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Position');
  return deserializePosition(maybeAccount);
}

export async function safeFetchPosition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Position | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePosition(maybeAccount) : null;
}

export async function fetchAllPosition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Position[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Position');
    return deserializePosition(maybeAccount);
  });
}

export async function safeFetchAllPosition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Position[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePosition(maybeAccount as RpcAccount));
}

export function getPositionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bertStakingSc',
    'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: PublicKey;
      depositTime: number | bigint;
      amount: number | bigint;
      positionType: PositionTypeArgs;
      unlockTime: number | bigint;
      status: PositionStatusArgs;
      nftMint: PublicKey;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, publicKeySerializer()],
      depositTime: [40, i64()],
      amount: [48, u64()],
      positionType: [56, getPositionTypeSerializer()],
      unlockTime: [57, i64()],
      status: [65, getPositionStatusSerializer()],
      nftMint: [66, publicKeySerializer()],
      bump: [98, u8()],
    })
    .deserializeUsing<Position>((account) => deserializePosition(account))
    .whereField(
      'discriminator',
      new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
    );
}
