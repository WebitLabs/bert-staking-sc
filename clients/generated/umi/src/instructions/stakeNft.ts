/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type StakeNftInstructionAccounts = {
  owner: Signer;
  config?: PublicKey | Pda;
  position?: PublicKey | Pda;
  nftMint: PublicKey | Pda;
  nftTokenAccount?: PublicKey | Pda;
  programNftAccount?: PublicKey | Pda;
  programAuthority?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type StakeNftInstructionData = { discriminator: Uint8Array };

export type StakeNftInstructionDataArgs = {};

export function getStakeNftInstructionDataSerializer(): Serializer<
  StakeNftInstructionDataArgs,
  StakeNftInstructionData
> {
  return mapSerializer<
    StakeNftInstructionDataArgs,
    any,
    StakeNftInstructionData
  >(
    struct<StakeNftInstructionData>([['discriminator', bytes({ size: 8 })]], {
      description: 'StakeNftInstructionData',
    }),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([38, 27, 66, 46, 69, 65, 151, 219]),
    })
  ) as Serializer<StakeNftInstructionDataArgs, StakeNftInstructionData>;
}

// Instruction.
export function stakeNft(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: StakeNftInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'bertStakingSc',
    'H4B2h3ypQtc1Pwzcskx7ApnSWGj9AeuN2q7WvkjvAgE2'
  );

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: true as boolean,
      value: input.owner ?? null,
    },
    config: {
      index: 1,
      isWritable: false as boolean,
      value: input.config ?? null,
    },
    position: {
      index: 2,
      isWritable: true as boolean,
      value: input.position ?? null,
    },
    nftMint: {
      index: 3,
      isWritable: false as boolean,
      value: input.nftMint ?? null,
    },
    nftTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.nftTokenAccount ?? null,
    },
    programNftAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.programNftAccount ?? null,
    },
    programAuthority: {
      index: 6,
      isWritable: false as boolean,
      value: input.programAuthority ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    rent: {
      index: 10,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([99, 111, 110, 102, 105, 103])),
    ]);
  }
  if (!resolvedAccounts.position.value) {
    resolvedAccounts.position.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.owner.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.nftMint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.nftTokenAccount.value) {
    resolvedAccounts.nftTokenAccount.value = context.eddsa.findPda(programId, [
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.owner.value)
      ),
      bytes().serialize(
        new Uint8Array([
          6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
          121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126,
          255, 0, 169,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.nftMint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.programAuthority.value) {
    resolvedAccounts.programAuthority.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([97, 117, 116, 104, 111, 114, 105, 116, 121])
      ),
    ]);
  }
  if (!resolvedAccounts.programNftAccount.value) {
    resolvedAccounts.programNftAccount.value = context.eddsa.findPda(
      programId,
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.programAuthority.value)
        ),
        bytes().serialize(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.nftMint.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'associatedTokenProgram',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = context.programs.getPublicKey(
      'rent',
      'SysvarRent111111111111111111111111111111111'
    );
    resolvedAccounts.rent.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getStakeNftInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
