/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** PositionLocked: The staking position is still locked */
export class PositionLockedError extends ProgramError {
  override readonly name: string = 'PositionLocked';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('The staking position is still locked', program, cause);
  }
}
codeToErrorMap.set(0x1770, PositionLockedError);
nameToErrorMap.set('PositionLocked', PositionLockedError);

/** PositionAlreadyClaimed: The staking position has already been claimed */
export class PositionAlreadyClaimedError extends ProgramError {
  override readonly name: string = 'PositionAlreadyClaimed';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('The staking position has already been claimed', program, cause);
  }
}
codeToErrorMap.set(0x1771, PositionAlreadyClaimedError);
nameToErrorMap.set('PositionAlreadyClaimed', PositionAlreadyClaimedError);

/** MaxCapReached: Maximum staking capacity reached */
export class MaxCapReachedError extends ProgramError {
  override readonly name: string = 'MaxCapReached';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Maximum staking capacity reached', program, cause);
  }
}
codeToErrorMap.set(0x1772, MaxCapReachedError);
nameToErrorMap.set('MaxCapReached', MaxCapReachedError);

/** NftLimitReached: NFT limit per user reached */
export class NftLimitReachedError extends ProgramError {
  override readonly name: string = 'NftLimitReached';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('NFT limit per user reached', program, cause);
  }
}
codeToErrorMap.set(0x1773, NftLimitReachedError);
nameToErrorMap.set('NftLimitReached', NftLimitReachedError);

/** InvalidAmount: Invalid staking amount */
export class InvalidAmountError extends ProgramError {
  override readonly name: string = 'InvalidAmount';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid staking amount', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidAmountError);
nameToErrorMap.set('InvalidAmount', InvalidAmountError);

/** ArithmeticOverflow: Arithmetic overflow */
export class ArithmeticOverflowError extends ProgramError {
  override readonly name: string = 'ArithmeticOverflow';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Arithmetic overflow', program, cause);
  }
}
codeToErrorMap.set(0x1775, ArithmeticOverflowError);
nameToErrorMap.set('ArithmeticOverflow', ArithmeticOverflowError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getBertStakingScErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getBertStakingScErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
